/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'
import { Route as OauthRedirectImport } from './routes/oauth.redirect'
import { Route as AuthRecipesImport } from './routes/auth.recipes'
import { Route as AuthDashboardImport } from './routes/auth.dashboard'
import { Route as AuthRecipeRecipeIdImport } from './routes/auth.recipe.$recipeId'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const AuthRoute = AuthImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OauthRedirectRoute = OauthRedirectImport.update({
  path: '/oauth/redirect',
  getParentRoute: () => rootRoute,
} as any)

const AuthRecipesRoute = AuthRecipesImport.update({
  path: '/recipes',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthRecipeRecipeIdRoute = AuthRecipeRecipeIdImport.update({
  path: '/recipe/$recipeId',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/dashboard': {
      id: '/auth/dashboard'
      path: '/dashboard'
      fullPath: '/auth/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/auth/recipes': {
      id: '/auth/recipes'
      path: '/recipes'
      fullPath: '/auth/recipes'
      preLoaderRoute: typeof AuthRecipesImport
      parentRoute: typeof AuthImport
    }
    '/oauth/redirect': {
      id: '/oauth/redirect'
      path: '/oauth/redirect'
      fullPath: '/oauth/redirect'
      preLoaderRoute: typeof OauthRedirectImport
      parentRoute: typeof rootRoute
    }
    '/auth/recipe/$recipeId': {
      id: '/auth/recipe/$recipeId'
      path: '/recipe/$recipeId'
      fullPath: '/auth/recipe/$recipeId'
      preLoaderRoute: typeof AuthRecipeRecipeIdImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthRoute: AuthRoute.addChildren({
    AuthDashboardRoute,
    AuthRecipesRoute,
    AuthRecipeRecipeIdRoute,
  }),
  AboutLazyRoute,
  OauthRedirectRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/about",
        "/oauth/redirect"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/dashboard",
        "/auth/recipes",
        "/auth/recipe/$recipeId"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/auth/dashboard": {
      "filePath": "auth.dashboard.tsx",
      "parent": "/auth"
    },
    "/auth/recipes": {
      "filePath": "auth.recipes.tsx",
      "parent": "/auth"
    },
    "/oauth/redirect": {
      "filePath": "oauth.redirect.tsx"
    },
    "/auth/recipe/$recipeId": {
      "filePath": "auth.recipe.$recipeId.tsx",
      "parent": "/auth"
    }
  }
}
ROUTE_MANIFEST_END */
